{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import styled from'styled-components';import{motion,AnimatePresence}from'framer-motion';import{sendChatMessage}from'../api';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ChatbotContainer=styled(motion.div)`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 350px;\n  background-color: ${props=>props.theme.colors.glass};\n  border-radius: ${props=>props.theme.borderRadius.large};\n  box-shadow: ${props=>props.theme.boxShadow.large};\n  overflow: hidden;\n  backdrop-filter: blur(10px);\n`;const ChatHeader=styled.div`\n  background-color: ${props=>props.theme.colors.primary};\n  color: white;\n  padding: ${props=>props.theme.spacing.md};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-weight: bold;\n`;const ChatMessages=styled.div`\n  height: 350px;\n  overflow-y: auto;\n  padding: ${props=>props.theme.spacing.md};\n  display: flex;\n  flex-direction: column;\n`;const MessageBubble=styled.div`\n  max-width: 80%;\n  padding: ${props=>props.theme.spacing.sm} ${props=>props.theme.spacing.md};\n  border-radius: ${props=>props.theme.borderRadius.medium};\n  margin-bottom: ${props=>props.theme.spacing.sm};\n  align-self: ${props=>props.sender==='user'?'flex-end':'flex-start'};\n  background-color: ${props=>props.sender==='user'?props.theme.colors.secondary:props.theme.colors.tertiary};\n  color: ${props=>props.theme.colors.text};\n`;const ChatInputContainer=styled.div`\n  display: flex;\n  padding: ${props=>props.theme.spacing.sm};\n  background-color: rgba(255, 255, 255, 0.1);\n`;const ChatInput=styled.input`\n  flex-grow: 1;\n  padding: ${props=>props.theme.spacing.sm};\n  border: none;\n  border-radius: ${props=>props.theme.borderRadius.small};\n  background-color: rgba(255, 255, 255, 0.2);\n  color: ${props=>props.theme.colors.text};\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${props=>props.theme.colors.secondary};\n  }\n`;const SendButton=styled.button`\n  background-color: ${props=>props.theme.colors.secondary};\n  color: white;\n  border: none;\n  border-radius: ${props=>props.theme.borderRadius.small};\n  padding: ${props=>props.theme.spacing.sm} ${props=>props.theme.spacing.md};\n  margin-left: ${props=>props.theme.spacing.sm};\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: ${props=>props.theme.colors.tertiary};\n  }\n`;const ChatToggle=styled(motion.button)`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: ${props=>props.theme.colors.primary};\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  font-size: 24px;\n  cursor: pointer;\n  box-shadow: ${props=>props.theme.boxShadow.medium};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;const Chatbot=()=>{const[isOpen,setIsOpen]=useState(false);const[messages,setMessages]=useState([]);const[input,setInput]=useState('');const messagesEndRef=useRef(null);const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});};useEffect(scrollToBottom,[messages]);const handleSend=async()=>{if(input.trim()){setMessages([...messages,{text:input,sender:'user'}]);setInput('');const response=await sendChatMessage(input);setMessages(msgs=>[...msgs,{text:response,sender:'bot'}]);}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(AnimatePresence,{children:isOpen&&/*#__PURE__*/_jsxs(ChatbotContainer,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},exit:{opacity:0,y:20},transition:{type:'spring',stiffness:500,damping:30},children:[/*#__PURE__*/_jsxs(ChatHeader,{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Plant Health Assistant\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsOpen(false),children:\"\\u2715\"})]}),/*#__PURE__*/_jsxs(ChatMessages,{children:[messages.map((msg,index)=>/*#__PURE__*/_jsx(MessageBubble,{sender:msg.sender,children:msg.text},index)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(ChatInputContainer,{children:[/*#__PURE__*/_jsx(ChatInput,{value:input,onChange:e=>setInput(e.target.value),onKeyPress:e=>e.key==='Enter'&&handleSend(),placeholder:\"Type your message...\"}),/*#__PURE__*/_jsx(SendButton,{onClick:handleSend,children:\"Send\"})]})]})}),/*#__PURE__*/_jsx(ChatToggle,{onClick:()=>setIsOpen(!isOpen),whileHover:{scale:1.1},whileTap:{scale:0.9},children:isOpen?'âœ•':'ðŸ’¬'})]});};export default Chatbot;","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","motion","AnimatePresence","sendChatMessage","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ChatbotContainer","div","props","theme","colors","glass","borderRadius","large","boxShadow","ChatHeader","primary","spacing","md","ChatMessages","MessageBubble","sm","medium","sender","secondary","tertiary","text","ChatInputContainer","ChatInput","input","small","SendButton","button","ChatToggle","Chatbot","isOpen","setIsOpen","messages","setMessages","setInput","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSend","trim","response","msgs","children","initial","opacity","y","animate","exit","transition","type","stiffness","damping","onClick","map","msg","index","ref","value","onChange","e","target","onKeyPress","key","placeholder","whileHover","scale","whileTap"],"sources":["C:/Users/santosh/Desktop/All Projects/Plant-Disease-Detection/app/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { sendChatMessage } from '../api';\r\n\r\nconst ChatbotContainer = styled(motion.div)`\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  width: 350px;\r\n  background-color: ${props => props.theme.colors.glass};\r\n  border-radius: ${props => props.theme.borderRadius.large};\r\n  box-shadow: ${props => props.theme.boxShadow.large};\r\n  overflow: hidden;\r\n  backdrop-filter: blur(10px);\r\n`;\r\n\r\nconst ChatHeader = styled.div`\r\n  background-color: ${props => props.theme.colors.primary};\r\n  color: white;\r\n  padding: ${props => props.theme.spacing.md};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst ChatMessages = styled.div`\r\n  height: 350px;\r\n  overflow-y: auto;\r\n  padding: ${props => props.theme.spacing.md};\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst MessageBubble = styled.div`\r\n  max-width: 80%;\r\n  padding: ${props => props.theme.spacing.sm} ${props => props.theme.spacing.md};\r\n  border-radius: ${props => props.theme.borderRadius.medium};\r\n  margin-bottom: ${props => props.theme.spacing.sm};\r\n  align-self: ${props => props.sender === 'user' ? 'flex-end' : 'flex-start'};\r\n  background-color: ${props => props.sender === 'user' ? props.theme.colors.secondary : props.theme.colors.tertiary};\r\n  color: ${props => props.theme.colors.text};\r\n`;\r\n\r\nconst ChatInputContainer = styled.div`\r\n  display: flex;\r\n  padding: ${props => props.theme.spacing.sm};\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n`;\r\n\r\nconst ChatInput = styled.input`\r\n  flex-grow: 1;\r\n  padding: ${props => props.theme.spacing.sm};\r\n  border: none;\r\n  border-radius: ${props => props.theme.borderRadius.small};\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  color: ${props => props.theme.colors.text};\r\n\r\n  &:focus {\r\n    outline: none;\r\n    box-shadow: 0 0 0 2px ${props => props.theme.colors.secondary};\r\n  }\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n  background-color: ${props => props.theme.colors.secondary};\r\n  color: white;\r\n  border: none;\r\n  border-radius: ${props => props.theme.borderRadius.small};\r\n  padding: ${props => props.theme.spacing.sm} ${props => props.theme.spacing.md};\r\n  margin-left: ${props => props.theme.spacing.sm};\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: ${props => props.theme.colors.tertiary};\r\n  }\r\n`;\r\n\r\nconst ChatToggle = styled(motion.button)`\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  background-color: ${props => props.theme.colors.primary};\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 60px;\r\n  height: 60px;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  box-shadow: ${props => props.theme.boxShadow.medium};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Chatbot = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  const handleSend = async () => {\r\n    if (input.trim()) {\r\n      setMessages([...messages, { text: input, sender: 'user' }]);\r\n      setInput('');\r\n      const response = await sendChatMessage(input);\r\n      setMessages(msgs => [...msgs, { text: response, sender: 'bot' }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AnimatePresence>\r\n        {isOpen && (\r\n          <ChatbotContainer\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: 20 }}\r\n            transition={{ type: 'spring', stiffness: 500, damping: 30 }}\r\n          >\r\n            <ChatHeader>\r\n              <span>Plant Health Assistant</span>\r\n              <button onClick={() => setIsOpen(false)}>âœ•</button>\r\n            </ChatHeader>\r\n            <ChatMessages>\r\n              {messages.map((msg, index) => (\r\n                <MessageBubble key={index} sender={msg.sender}>\r\n                  {msg.text}\r\n                </MessageBubble>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </ChatMessages>\r\n            <ChatInputContainer>\r\n              <ChatInput\r\n                value={input}\r\n                onChange={(e) => setInput(e.target.value)}\r\n                onKeyPress={(e) => e.key === 'Enter' && handleSend()}\r\n                placeholder=\"Type your message...\"\r\n              />\r\n              <SendButton onClick={handleSend}>Send</SendButton>\r\n            </ChatInputContainer>\r\n          </ChatbotContainer>\r\n        )}\r\n      </AnimatePresence>\r\n      <ChatToggle\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        whileHover={{ scale: 1.1 }}\r\n        whileTap={{ scale: 0.9 }}\r\n      >\r\n        {isOpen ? 'âœ•' : 'ðŸ’¬'}\r\n      </ChatToggle>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,OAASC,MAAM,CAAEC,eAAe,KAAQ,eAAe,CACvD,OAASC,eAAe,KAAQ,QAAQ,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAEzC,KAAM,CAAAC,gBAAgB,CAAGV,MAAM,CAACC,MAAM,CAACU,GAAG,CAAC;AAC3C;AACA;AACA;AACA;AACA,sBAAsBC,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACC,KAAK;AACvD,mBAAmBH,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACG,YAAY,CAACC,KAAK;AAC1D,gBAAgBL,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACK,SAAS,CAACD,KAAK;AACpD;AACA;AACA,CAAC,CAED,KAAM,CAAAE,UAAU,CAAGnB,MAAM,CAACW,GAAG;AAC7B,sBAAsBC,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACM,OAAO;AACzD;AACA,aAAaR,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACQ,OAAO,CAACC,EAAE;AAC5C;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,YAAY,CAAGvB,MAAM,CAACW,GAAG;AAC/B;AACA;AACA,aAAaC,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACQ,OAAO,CAACC,EAAE;AAC5C;AACA;AACA,CAAC,CAED,KAAM,CAAAE,aAAa,CAAGxB,MAAM,CAACW,GAAG;AAChC;AACA,aAAaC,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACQ,OAAO,CAACI,EAAE,IAAIb,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACQ,OAAO,CAACC,EAAE;AAC/E,mBAAmBV,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACG,YAAY,CAACU,MAAM;AAC3D,mBAAmBd,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACQ,OAAO,CAACI,EAAE;AAClD,gBAAgBb,KAAK,EAAIA,KAAK,CAACe,MAAM,GAAK,MAAM,CAAG,UAAU,CAAG,YAAY;AAC5E,sBAAsBf,KAAK,EAAIA,KAAK,CAACe,MAAM,GAAK,MAAM,CAAGf,KAAK,CAACC,KAAK,CAACC,MAAM,CAACc,SAAS,CAAGhB,KAAK,CAACC,KAAK,CAACC,MAAM,CAACe,QAAQ;AACnH,WAAWjB,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACgB,IAAI;AAC3C,CAAC,CAED,KAAM,CAAAC,kBAAkB,CAAG/B,MAAM,CAACW,GAAG;AACrC;AACA,aAAaC,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACQ,OAAO,CAACI,EAAE;AAC5C;AACA,CAAC,CAED,KAAM,CAAAO,SAAS,CAAGhC,MAAM,CAACiC,KAAK;AAC9B;AACA,aAAarB,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACQ,OAAO,CAACI,EAAE;AAC5C;AACA,mBAAmBb,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACG,YAAY,CAACkB,KAAK;AAC1D;AACA,WAAWtB,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACgB,IAAI;AAC3C;AACA;AACA;AACA,4BAA4BlB,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACc,SAAS;AACjE;AACA,CAAC,CAED,KAAM,CAAAO,UAAU,CAAGnC,MAAM,CAACoC,MAAM;AAChC,sBAAsBxB,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACc,SAAS;AAC3D;AACA;AACA,mBAAmBhB,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACG,YAAY,CAACkB,KAAK;AAC1D,aAAatB,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACQ,OAAO,CAACI,EAAE,IAAIb,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACQ,OAAO,CAACC,EAAE;AAC/E,iBAAiBV,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACQ,OAAO,CAACI,EAAE;AAChD;AACA;AACA;AACA;AACA,wBAAwBb,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACe,QAAQ;AAC5D;AACA,CAAC,CAED,KAAM,CAAAQ,UAAU,CAAGrC,MAAM,CAACC,MAAM,CAACmC,MAAM,CAAC;AACxC;AACA;AACA;AACA,sBAAsBxB,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACM,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgBR,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACK,SAAS,CAACQ,MAAM;AACrD;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAY,OAAO,CAAGA,CAAA,GAAM,CACpB,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAG3C,QAAQ,CAAC,KAAK,CAAC,CAC3C,KAAM,CAAC4C,QAAQ,CAAEC,WAAW,CAAC,CAAG7C,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACoC,KAAK,CAAEU,QAAQ,CAAC,CAAG9C,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAAA+C,cAAc,CAAG7C,MAAM,CAAC,IAAI,CAAC,CAEnC,KAAM,CAAA8C,cAAc,CAAGA,CAAA,GAAM,KAAAC,qBAAA,CAC3B,CAAAA,qBAAA,CAAAF,cAAc,CAACG,OAAO,UAAAD,qBAAA,iBAAtBA,qBAAA,CAAwBE,cAAc,CAAC,CAAEC,QAAQ,CAAE,QAAS,CAAC,CAAC,CAChE,CAAC,CAEDnD,SAAS,CAAC+C,cAAc,CAAE,CAACJ,QAAQ,CAAC,CAAC,CAErC,KAAM,CAAAS,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAIjB,KAAK,CAACkB,IAAI,CAAC,CAAC,CAAE,CAChBT,WAAW,CAAC,CAAC,GAAGD,QAAQ,CAAE,CAAEX,IAAI,CAAEG,KAAK,CAAEN,MAAM,CAAE,MAAO,CAAC,CAAC,CAAC,CAC3DgB,QAAQ,CAAC,EAAE,CAAC,CACZ,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAjD,eAAe,CAAC8B,KAAK,CAAC,CAC7CS,WAAW,CAACW,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAE,CAAEvB,IAAI,CAAEsB,QAAQ,CAAEzB,MAAM,CAAE,KAAM,CAAC,CAAC,CAAC,CACnE,CACF,CAAC,CAED,mBACEpB,KAAA,CAAAE,SAAA,EAAA6C,QAAA,eACEjD,IAAA,CAACH,eAAe,EAAAoD,QAAA,CACbf,MAAM,eACLhC,KAAA,CAACG,gBAAgB,EACf6C,OAAO,CAAE,CAAEC,OAAO,CAAE,CAAC,CAAEC,CAAC,CAAE,EAAG,CAAE,CAC/BC,OAAO,CAAE,CAAEF,OAAO,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAE,CAAE,CAC9BE,IAAI,CAAE,CAAEH,OAAO,CAAE,CAAC,CAAEC,CAAC,CAAE,EAAG,CAAE,CAC5BG,UAAU,CAAE,CAAEC,IAAI,CAAE,QAAQ,CAAEC,SAAS,CAAE,GAAG,CAAEC,OAAO,CAAE,EAAG,CAAE,CAAAT,QAAA,eAE5D/C,KAAA,CAACY,UAAU,EAAAmC,QAAA,eACTjD,IAAA,SAAAiD,QAAA,CAAM,wBAAsB,CAAM,CAAC,cACnCjD,IAAA,WAAQ2D,OAAO,CAAEA,CAAA,GAAMxB,SAAS,CAAC,KAAK,CAAE,CAAAc,QAAA,CAAC,QAAC,CAAQ,CAAC,EACzC,CAAC,cACb/C,KAAA,CAACgB,YAAY,EAAA+B,QAAA,EACVb,QAAQ,CAACwB,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAK,gBACvB9D,IAAA,CAACmB,aAAa,EAAaG,MAAM,CAAEuC,GAAG,CAACvC,MAAO,CAAA2B,QAAA,CAC3CY,GAAG,CAACpC,IAAI,EADSqC,KAEL,CAChB,CAAC,cACF9D,IAAA,QAAK+D,GAAG,CAAExB,cAAe,CAAE,CAAC,EAChB,CAAC,cACfrC,KAAA,CAACwB,kBAAkB,EAAAuB,QAAA,eACjBjD,IAAA,CAAC2B,SAAS,EACRqC,KAAK,CAAEpC,KAAM,CACbqC,QAAQ,CAAGC,CAAC,EAAK5B,QAAQ,CAAC4B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC1CI,UAAU,CAAGF,CAAC,EAAKA,CAAC,CAACG,GAAG,GAAK,OAAO,EAAIxB,UAAU,CAAC,CAAE,CACrDyB,WAAW,CAAC,sBAAsB,CACnC,CAAC,cACFtE,IAAA,CAAC8B,UAAU,EAAC6B,OAAO,CAAEd,UAAW,CAAAI,QAAA,CAAC,MAAI,CAAY,CAAC,EAChC,CAAC,EACL,CACnB,CACc,CAAC,cAClBjD,IAAA,CAACgC,UAAU,EACT2B,OAAO,CAAEA,CAAA,GAAMxB,SAAS,CAAC,CAACD,MAAM,CAAE,CAClCqC,UAAU,CAAE,CAAEC,KAAK,CAAE,GAAI,CAAE,CAC3BC,QAAQ,CAAE,CAAED,KAAK,CAAE,GAAI,CAAE,CAAAvB,QAAA,CAExBf,MAAM,CAAG,GAAG,CAAG,IAAI,CACV,CAAC,EACb,CAAC,CAEP,CAAC,CAED,cAAe,CAAAD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}