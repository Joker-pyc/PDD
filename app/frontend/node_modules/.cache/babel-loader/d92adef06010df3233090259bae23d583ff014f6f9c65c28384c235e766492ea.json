{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import styled from'styled-components';import{motion,AnimatePresence}from'framer-motion';import{sendChatMessage}from'../api';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ChatbotContainer=styled(motion.div)`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 300px;\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n`;const ChatHeader=styled.div`\n  background-color: ${props=>props.theme.colors.primary};\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;const ChatMessages=styled.div`\n  height: 300px;\n  overflow-y: auto;\n  padding: 10px;\n`;const ChatInput=styled.input`\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-top: 1px solid #eee;\n`;const ChatToggle=styled(motion.button)`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: ${props=>props.theme.colors.primary};\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  font-size: 24px;\n  cursor: pointer;\n`;const Chatbot=()=>{const[isOpen,setIsOpen]=useState(false);const[messages,setMessages]=useState([]);const[input,setInput]=useState('');const messagesEndRef=useRef(null);const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});};useEffect(scrollToBottom,[messages]);const handleSend=async()=>{if(input.trim()){setMessages([...messages,{text:input,sender:'user'}]);setInput('');const response=await sendChatMessage(input);setMessages(msgs=>[...msgs,{text:response,sender:'bot'}]);}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(AnimatePresence,{children:isOpen&&/*#__PURE__*/_jsxs(ChatbotContainer,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},exit:{opacity:0,y:20},children:[/*#__PURE__*/_jsxs(ChatHeader,{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Plant Health Assistant\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsOpen(false),children:\"X\"})]}),/*#__PURE__*/_jsxs(ChatMessages,{children:[messages.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{children:msg.text},index)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsx(ChatInput,{value:input,onChange:e=>setInput(e.target.value),onKeyPress:e=>e.key==='Enter'&&handleSend(),placeholder:\"Type your message...\"})]})}),/*#__PURE__*/_jsx(ChatToggle,{onClick:()=>setIsOpen(!isOpen),whileHover:{scale:1.1},whileTap:{scale:0.9},children:\"\\uD83D\\uDCAC\"})]});};export default Chatbot;","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","motion","AnimatePresence","sendChatMessage","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ChatbotContainer","div","ChatHeader","props","theme","colors","primary","ChatMessages","ChatInput","input","ChatToggle","button","Chatbot","isOpen","setIsOpen","messages","setMessages","setInput","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSend","trim","text","sender","response","msgs","children","initial","opacity","y","animate","exit","onClick","map","msg","index","ref","value","onChange","e","target","onKeyPress","key","placeholder","whileHover","scale","whileTap"],"sources":["C:/Users/santosh/Desktop/All Projects/Plant-Disease-Detection/app/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { sendChatMessage } from '../api';\r\n\r\nconst ChatbotContainer = styled(motion.div)`\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  width: 300px;\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n`;\r\n\r\nconst ChatHeader = styled.div`\r\n  background-color: ${props => props.theme.colors.primary};\r\n  color: white;\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst ChatMessages = styled.div`\r\n  height: 300px;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n`;\r\n\r\nconst ChatInput = styled.input`\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: none;\r\n  border-top: 1px solid #eee;\r\n`;\r\n\r\nconst ChatToggle = styled(motion.button)`\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  background-color: ${props => props.theme.colors.primary};\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 50px;\r\n  height: 50px;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Chatbot = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  const handleSend = async () => {\r\n    if (input.trim()) {\r\n      setMessages([...messages, { text: input, sender: 'user' }]);\r\n      setInput('');\r\n      const response = await sendChatMessage(input);\r\n      setMessages(msgs => [...msgs, { text: response, sender: 'bot' }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AnimatePresence>\r\n        {isOpen && (\r\n          <ChatbotContainer\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: 20 }}\r\n          >\r\n            <ChatHeader>\r\n              <span>Plant Health Assistant</span>\r\n              <button onClick={() => setIsOpen(false)}>X</button>\r\n            </ChatHeader>\r\n            <ChatMessages>\r\n              {messages.map((msg, index) => (\r\n                <div key={index}>{msg.text}</div>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </ChatMessages>\r\n            <ChatInput\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              onKeyPress={(e) => e.key === 'Enter' && handleSend()}\r\n              placeholder=\"Type your message...\"\r\n            />\r\n          </ChatbotContainer>\r\n        )}\r\n      </AnimatePresence>\r\n      <ChatToggle\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        whileHover={{ scale: 1.1 }}\r\n        whileTap={{ scale: 0.9 }}\r\n      >\r\n        ðŸ’¬\r\n      </ChatToggle>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}